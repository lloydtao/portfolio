{"_path":"/blog/nuxt/adding-pinia-to-nuxt-3-tutorial-global-state-management","_dir":"nuxt","_draft":false,"_partial":false,"_locale":"","title":"Adding Pinia to Nuxt 3 🍍 (2023)","description":"Getting started with Pinia for global state management.","slug":"adding-pinia-to-nuxt-3-tutorial-global-state-management","subtitle":"","series":"Nuxt 3","localimage":"/images/nuxt-cover-16-9.png","cover_image":"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eozu62uqnpka4l58nhah.png","publishedAt":"2023-01-04T09:00:00.000Z","tags":"nuxt, nuxt3, pinia","published":true,"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"introduction"},"children":[{"type":"text","value":"Introduction"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this post, we'll introduce Pinia, a powerful package for managing your Nuxt app's state in a single place."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Whether you're new to state management solutions or experienced with libraries such as Vuex and Redux, Pinia is definitely worth checking out."}]},{"type":"element","tag":"h2","props":{"id":"state-management"},"children":[{"type":"text","value":"State management"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you've ever found yourself aimlessly trying to manage state through props and events, then the idea of a store may sound appealing:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Manage an app's state from a single, centralised store"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Update and retrieve data through simple actions and getters"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Subscribe to changes to achieve deep reactivity without much work"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This helps to make changes to the app's state predictable and more consistent."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For example, we can store a counter, and then increment it from anywhere by using its store:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Demo of counter component","src":"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cf2kfethplnmjmvv3oj.gif"},"children":[]}]},{"type":"element","tag":"h3","props":{"id":"pinia"},"children":[{"type":"text","value":"Pinia"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Pinia is a state management library for Vue, with an officially-supported module for Nuxt 3 ("},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"@pinia/nuxt"}]},{"type":"text","value":"). It's also the recommended solution for Vue and Nuxt projects."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Don't just take it from me:"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\"Pinia is de facto Vuex 5!\""}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"— "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Evan You, creator of Vue"}]},{"type":"text","value":" ("},{"type":"element","tag":"a","props":{"href":"https://twitter.com/youyuxi/status/1463429442076745730","rel":["nofollow"]},"children":[{"type":"text","value":"source"}]},{"type":"text","value":")"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"What makes it useful for Vue and Nuxt applications?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Deep reactivity by default"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"No explicit mutations (all changes are implicit mutations)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Analogous with Options API:\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Actions (equivalent of "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"methods"}]},{"type":"text","value":")"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Getters (equivalent of "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"computed"}]},{"type":"text","value":")"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"installation"},"children":[{"type":"text","value":"Installation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Official documentation for using Pinia with Nuxt can be found "},{"type":"element","tag":"a","props":{"href":"https://nuxt.com/modules/pinia","rel":["nofollow"]},"children":[{"type":"text","value":"here"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Install the package:"}]},{"type":"element","tag":"pre","props":{"className":["language-sh"],"code":"yarn add @pinia/nuxt\n","language":"sh","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"yarn add @pinia/nuxt\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Add the module to your Nuxt configuration:"}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// nuxt.config.ts\n\nexport default defineNuxtConfig({\n  // ...\n  modules: [\n    // ...\n    \"@pinia/nuxt\",\n  ],\n});\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// nuxt.config.ts\n\nexport default defineNuxtConfig({\n  // ...\n  modules: [\n    // ...\n    \"@pinia/nuxt\",\n  ],\n});\n"}]}]},{"type":"element","tag":"h2","props":{"id":"creating-a-store"},"children":[{"type":"text","value":"Creating a store"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Stores are created in a "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"stores/"}]},{"type":"text","value":" directory, and defined by using Pinia's "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"defineStore"}]},{"type":"text","value":" method."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this example, we have created a store ("},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"useCounterStore"}]},{"type":"text","value":") and given the store a name ("},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"counter"}]},{"type":"text","value":"). We have then defined our "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"state"}]},{"type":"text","value":" property ("},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"count"}]},{"type":"text","value":") with an initial value."}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// stores/counter.ts\n\nimport { defineStore } from \"pinia\";\n\nexport const useCounterStore = defineStore(\"counter\", {\n  state: () => ({\n    count: 0,\n  }),\n});\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// stores/counter.ts\n\nimport { defineStore } from \"pinia\";\n\nexport const useCounterStore = defineStore(\"counter\", {\n  state: () => ({\n    count: 0,\n  }),\n});\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"It's as simple as that!"}]},{"type":"element","tag":"h2","props":{"id":"using-the-store"},"children":[{"type":"text","value":"Using the store"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Pinia offers a few ways to access the store and maintain reactivity."}]},{"type":"element","tag":"h3","props":{"id":"_1-store-instance"},"children":[{"type":"text","value":"1. Store instance"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In your component's "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"setup()"}]},{"type":"text","value":", import the store's "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"useStore()"}]},{"type":"text","value":" method."}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// components/MyCounter.vue\n\nimport { useCounterStore } from \"@/stores/counter\";\n\nexport default defineComponent({\n  setup() {\n    return {\n      store: useCounterStore(),\n    };\n  },\n});\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// components/MyCounter.vue\n\nimport { useCounterStore } from \"@/stores/counter\";\n\nexport default defineComponent({\n  setup() {\n    return {\n      store: useCounterStore(),\n    };\n  },\n});\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can now access state through the store instance:"}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// components/MyCounter.vue\n\n<template>\n  <p>Counter: {{ store.count }}</p>\n</template>\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// components/MyCounter.vue\n\n<template>\n  <p>Counter: {{ store.count }}</p>\n</template>\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_2-computed-properties"},"children":[{"type":"text","value":"2. Computed properties"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To write cleaner code, you may wish to grab specific properties. However, destructuring the store will break reactivity."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Instead, we can use a computed property to achieve reactivity:"}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// components/MyCounter.vue\n\nexport default defineComponent({\n  setup() {\n    const store = useCounterStore();\n\n    // ❌ Bad (unreactive):\n    const { count } = store;\n\n    // ✔️ Good:\n    const count = computed(() => store.count);\n\n    return { count };\n  },\n});\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// components/MyCounter.vue\n\nexport default defineComponent({\n  setup() {\n    const store = useCounterStore();\n\n    // ❌ Bad (unreactive):\n    const { count } = store;\n\n    // ✔️ Good:\n    const count = computed(() => store.count);\n\n    return { count };\n  },\n});\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// components/MyCounter.vue\n\n<template>\n  <p>Counter: {{ store.count }}</p>\n</template>\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// components/MyCounter.vue\n\n<template>\n  <p>Counter: {{ store.count }}</p>\n</template>\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_3-extract-via-storetorefs"},"children":[{"type":"text","value":"3. Extract via storeToRefs()"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can destructure properties from the store while keeping reactivity through the use of "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"storeToRefs()"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This will create a ref for each reactive property."}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// components/MyCounter.vue\nimport { storeToRefs } from \"pinia\";\nimport { useCounterStore } from \"@/stores/counter\";\n\nexport default defineComponent({\n  setup() {\n    const store = useCounterStore();\n\n    // ❌ Bad (unreactive):\n    const { count } = store;\n\n    // ✔️ Good:\n    const { count } = storeToRefs(store);\n\n    return { count };\n  },\n});\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// components/MyCounter.vue\nimport { storeToRefs } from \"pinia\";\nimport { useCounterStore } from \"@/stores/counter\";\n\nexport default defineComponent({\n  setup() {\n    const store = useCounterStore();\n\n    // ❌ Bad (unreactive):\n    const { count } = store;\n\n    // ✔️ Good:\n    const { count } = storeToRefs(store);\n\n    return { count };\n  },\n});\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// components/MyCounter.vue\n\n<template>\n  <p>Counter: {{ store.count }}</p>\n</template>\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// components/MyCounter.vue\n\n<template>\n  <p>Counter: {{ store.count }}</p>\n</template>\n"}]}]},{"type":"element","tag":"h2","props":{"id":"actions"},"children":[{"type":"text","value":"Actions"}]},{"type":"element","tag":"h3","props":{"id":"adding-an-action"},"children":[{"type":"text","value":"Adding an action"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Actions are the equivalent of "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"methods"}]},{"type":"text","value":" in components, defined in the store's "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"actions"}]},{"type":"text","value":" property."}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// stores/counter.ts\n\nexport const useCounterStore = defineStore(\"counter\", {\n  state: () => ({\n    count: 0,\n  }),\n  actions: {\n    increment() {\n      this.count++;\n    },\n  },\n});\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// stores/counter.ts\n\nexport const useCounterStore = defineStore(\"counter\", {\n  state: () => ({\n    count: 0,\n  }),\n  actions: {\n    increment() {\n      this.count++;\n    },\n  },\n});\n"}]}]},{"type":"element","tag":"h3","props":{"id":"using-an-action"},"children":[{"type":"text","value":"Using an action"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In your component, extract the action from the store."}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// components/MyCounter.vue\n\nexport default defineComponent({\n  setup() {\n    const store = useCounterStore();\n    const { increment } = store;\n    const count = computed(() => store.count);\n    return { increment, count };\n  },\n});\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// components/MyCounter.vue\n\nexport default defineComponent({\n  setup() {\n    const store = useCounterStore();\n    const { increment } = store;\n    const count = computed(() => store.count);\n    return { increment, count };\n  },\n});\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The action can easily be invoked, such as upon a button being clicked:"}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// components/MyCounter.vue\n\n<template>\n  <button type=\"button\" @click=\"increment\"></button>\n</template>\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// components/MyCounter.vue\n\n<template>\n  <button type=\"button\" @click=\"increment\"></button>\n</template>\n"}]}]},{"type":"element","tag":"h2","props":{"id":"getters"},"children":[{"type":"text","value":"Getters"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Getters are the equivalent of "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"computed"}]},{"type":"text","value":" in components, defined in the store's "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"getters"}]},{"type":"text","value":" property."}]},{"type":"element","tag":"h3","props":{"id":"adding-a-getter"},"children":[{"type":"text","value":"Adding a getter"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Pinia encourages the usage of the arrow function, using the state as the first parameter:"}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// stores/counter.ts\n\nexport const useCounterStore = defineStore(\"counter\", {\n  state: () => ({\n    count: 0,\n  }),\n  getters: {\n    getCount: (state) => state.count,\n  },\n  actions: {\n    increment() {\n      this.count++;\n    },\n  },\n});\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// stores/counter.ts\n\nexport const useCounterStore = defineStore(\"counter\", {\n  state: () => ({\n    count: 0,\n  }),\n  getters: {\n    getCount: (state) => state.count,\n  },\n  actions: {\n    increment() {\n      this.count++;\n    },\n  },\n});\n"}]}]},{"type":"element","tag":"h3","props":{"id":"using-a-getter"},"children":[{"type":"text","value":"Using a getter"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Similarly to state properties, getters need to be accessed in a way that maintains reactivity."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For instance, you could access it through the store instance:"}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// components/MyCounter.vue\n\nexport default defineComponent({\n  setup() {\n    const store = useCounterStore();\n    return { store };\n  },\n});\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// components/MyCounter.vue\n\nexport default defineComponent({\n  setup() {\n    const store = useCounterStore();\n    return { store };\n  },\n});\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// components/MyCounter.vue\n\n<template>\n  <p>Counter: {{ store.getCount }}</p>\n</template>\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// components/MyCounter.vue\n\n<template>\n  <p>Counter: {{ store.getCount }}</p>\n</template>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Or, by using a computed property:"}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// components/MyCounter.vue\n\nexport default defineComponent({\n  setup() {\n    const store = useCounterStore();\n\n    // ❌ Bad (unreactive):\n    const { getCount } = store;\n\n    // ✔️ Good:\n    const getCount = computed(() => store.getCount);\n\n    return { getCount };\n  },\n});\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// components/MyCounter.vue\n\nexport default defineComponent({\n  setup() {\n    const store = useCounterStore();\n\n    // ❌ Bad (unreactive):\n    const { getCount } = store;\n\n    // ✔️ Good:\n    const getCount = computed(() => store.getCount);\n\n    return { getCount };\n  },\n});\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// components/MyCounter.vue\n\n<template>\n  <p>Counter: {{ getCount }}</p>\n</template>\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// components/MyCounter.vue\n\n<template>\n  <p>Counter: {{ getCount }}</p>\n</template>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Or, by using "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"storeToRefs()"}]},{"type":"text","value":":"}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// components/MyCounter.vue\nimport { storeToRefs } from \"pinia\";\nimport { useCounterStore } from \"@/stores/counter\";\n\nexport default defineComponent({\n  setup() {\n    const store = useCounterStore();\n\n    // ❌ Bad (unreactive):\n    const { getCount } = store;\n\n    // ✔️ Good:\n    const { getCount } = storeToRefs(store);\n\n    return { getCount };\n  },\n});\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// components/MyCounter.vue\nimport { storeToRefs } from \"pinia\";\nimport { useCounterStore } from \"@/stores/counter\";\n\nexport default defineComponent({\n  setup() {\n    const store = useCounterStore();\n\n    // ❌ Bad (unreactive):\n    const { getCount } = store;\n\n    // ✔️ Good:\n    const { getCount } = storeToRefs(store);\n\n    return { getCount };\n  },\n});\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// components/MyCounter.vue\n\n<template>\n  <p>Counter: {{ getCount }}</p>\n</template>\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// components/MyCounter.vue\n\n<template>\n  <p>Counter: {{ getCount }}</p>\n</template>\n"}]}]},{"type":"element","tag":"h2","props":{"id":"a-complete-component"},"children":[{"type":"text","value":"A complete component"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Since we've discussed actions and getters separately, here is a code snippet that combines both in the style that I recommend:"}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// components/MyCounter.vue\n\nimport { useCounterStore } from \"@/stores/counter\";\n\nexport default defineComponent({\n  setup() {\n    const store = useCounterStore();\n    const getCount = computed(() => store.getCount);\n    const { increment } = store;\n    return { getCount, increment };\n  },\n});\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// components/MyCounter.vue\n\nimport { useCounterStore } from \"@/stores/counter\";\n\nexport default defineComponent({\n  setup() {\n    const store = useCounterStore();\n    const getCount = computed(() => store.getCount);\n    const { increment } = store;\n    return { getCount, increment };\n  },\n});\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// components/MyCounter.vue\n\n<template>\n  <p>Counter: {{ getCount }}</p>\n  <button type=\"button\" @click=\"increment\">Increment</button>\n</template>\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// components/MyCounter.vue\n\n<template>\n  <p>Counter: {{ getCount }}</p>\n  <button type=\"button\" @click=\"increment\">Increment</button>\n</template>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This code has been implemented at "},{"type":"element","tag":"a","props":{"href":"https://github.com/lloydtao/nuxt-3-starter/","rel":["nofollow"]},"children":[{"type":"text","value":"lloydtao/nuxt-3-starter/"}]},{"type":"text","value":":"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Demo of counter component","src":"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cf2kfethplnmjmvv3oj.gif"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"How do you think your developer experience will be improved? 😉"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Hey, guys! Thank you for reading. I hope that you enjoyed this."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Keep up to date with me:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Website: "},{"type":"element","tag":"a","props":{"href":"https://lloyd.cx/","rel":["nofollow"]},"children":[{"type":"text","value":"https://lloyd.cx/"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Twitter: "},{"type":"element","tag":"a","props":{"href":"https://twitter.com/lloydtao/","rel":["nofollow"]},"children":[{"type":"text","value":"https://twitter.com/lloydtao/"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"GitHub: "},{"type":"element","tag":"a","props":{"href":"https://github.com/lloydtao/","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/lloydtao/"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"LinkedIn: "},{"type":"element","tag":"a","props":{"href":"https://www.linkedin.com/in/lloydtao/","rel":["nofollow"]},"children":[{"type":"text","value":"https://www.linkedin.com/in/lloydtao/"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"introduction","depth":2,"text":"Introduction"},{"id":"state-management","depth":2,"text":"State management","children":[{"id":"pinia","depth":3,"text":"Pinia"}]},{"id":"installation","depth":2,"text":"Installation"},{"id":"creating-a-store","depth":2,"text":"Creating a store"},{"id":"using-the-store","depth":2,"text":"Using the store","children":[{"id":"_1-store-instance","depth":3,"text":"1. Store instance"},{"id":"_2-computed-properties","depth":3,"text":"2. Computed properties"},{"id":"_3-extract-via-storetorefs","depth":3,"text":"3. Extract via storeToRefs()"}]},{"id":"actions","depth":2,"text":"Actions","children":[{"id":"adding-an-action","depth":3,"text":"Adding an action"},{"id":"using-an-action","depth":3,"text":"Using an action"}]},{"id":"getters","depth":2,"text":"Getters","children":[{"id":"adding-a-getter","depth":3,"text":"Adding a getter"},{"id":"using-a-getter","depth":3,"text":"Using a getter"}]},{"id":"a-complete-component","depth":2,"text":"A complete component"}]}},"_type":"markdown","_id":"content:blog:nuxt:adding-pinia-to-nuxt-3-tutorial-global-state-management.md","_source":"content","_file":"blog/nuxt/adding-pinia-to-nuxt-3-tutorial-global-state-management.md","_extension":"md"}